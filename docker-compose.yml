# docker-compose.yml

volumes:
  app_code: {}
  git_repo: {}

x-common-limits: &common_limits
  mem_limit: 512m
  memswap_limit: 512m
  cpus: "0.50"
  pids_limit: 256
  ulimits:
    nofile:
      soft: 65535
      hard: 65535
    nproc: 4096
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"

services:
  git:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    entrypoint:
      - python
      - -u
      - docker/git_entrypoint.py
    environment:
      APP_CMD: ""
      APP_DIR: "/app"
      GIT_ENABLE: "1"
      GIT_MODE: "watch"
      GIT_URL: "${REPO_URL:-https://github.com/SumbizAVGNT/panel_new.git}"
      GIT_REMOTE: "origin"
      GIT_BRANCH: "main"
      GIT_INTERVAL: "30"
      GIT_RESET: "1"
      GIT_RESTART: "0"
      GIT_VERBOSE: "1"
      PIP_ON_CHANGE: "0"
      PIP_FILE: "requirements.txt"
      GIT_DIR: "/git/.git"
      GIT_WORK_TREE: "/app"
    volumes:
      - app_code:/app
      - git_repo:/git
    healthcheck:
      test: ["CMD-SHELL", "test -f /app/requirements.txt -a -f /app/run.py -a -f /app/bridge/bridge.py || exit 1"]
      interval: 5s
      timeout: 2s
      retries: 30
    restart: unless-stopped
    <<: *common_limits
    mem_limit: 256m
    memswap_limit: 256m
    cpus: "0.25"

  bridge:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    entrypoint:
      - bash
      - -lc
      - |
        set -Eeuo pipefail
        cd /app

        until [ -f bridge/bridge.py ]; do echo '[bridge] wait code...'; sleep 1; done
        if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi

        checksum() {
          find . -type f \( -name '*.py' -o -name 'requirements.txt' \) \
            -not -path './.git/*' -not -path './__pycache__/*' \
            -printf '%P %T@ %s\n' | sort | md5sum | awk '{print $1}'
        }

        CS="$$(checksum || true)"

        watcher() {
          while true; do
            sleep 2
            NEW="$$(checksum || true)"
            if [ "$$NEW" != "$$CS" ]; then
              echo '[bridge] changes detected -> graceful restart'
              CS="$$NEW"
              if [ -n "$${PID:-}" ] && kill -0 "$$PID" 2>/dev/null; then
                kill -TERM "$$PID"
              fi
            fi
          done
        }

        backoff=1
        trap 'echo "[bridge] TERM"; [ -n "$${PID:-}" ] && kill -TERM "$$PID" 2>/dev/null || true' TERM INT

        watcher &

        while true; do
          echo '[bridge] starting...'
          set +e
          python -u bridge/bridge.py &
          PID=$!
          wait "$$PID"
          rc=$?
          set -e
          echo "[bridge] exited with code $$rc"

          if [ "$$rc" -eq 0 ]; then
            sleep 1
            backoff=1
          else
            sleep "$$backoff"
            if [ "$$backoff" -lt 30 ]; then backoff=$(( backoff * 2 )); fi
          fi
        done
    environment:
      SP_BRIDGE_HOST: 0.0.0.0
      SP_BRIDGE_PORT: 8765
      SP_TOKEN: SUPER_SECRET
      SP_REALM: anarchy
      PYTHONUNBUFFERED: "1"
    volumes:
      - app_code:/app
    depends_on:
      git:
        condition: service_healthy
    ports:
      - "8765:8765"
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(1); s.connect(('127.0.0.1',8765)); print('ok')"]
      interval: 10s
      timeout: 2s
      retries: 10
    restart: unless-stopped
    <<: *common_limits
    mem_limit: 256m
    memswap_limit: 256m
    cpus: "0.25"

  panel:
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /app
    entrypoint:
      - bash
      - -lc
      - |
        set -Eeuo pipefail
        cd /app

        until [ -f run.py ]; do echo '[panel] wait code...'; sleep 1; done
        if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi

        checksum() {
          find . -type f \( -name '*.py' -o -name 'requirements.txt' \) \
            -not -path './.git/*' -not -path './__pycache__/*' \
            -printf '%P %T@ %s\n' | sort | md5sum | awk '{print $1}'
        }

        CS="$$(checksum || true)"

        watcher() {
          while true; do
            sleep 2
            NEW="$$(checksum || true)"
            if [ "$$NEW" != "$$CS" ]; then
              echo '[panel] changes detected -> graceful restart'
              CS="$$NEW"
              if [ -n "$${PID:-}" ] && kill -0 "$$PID" 2>/dev/null; then
                kill -TERM "$$PID"
              fi
            fi
          done
        }

        backoff=1
        trap 'echo "[panel] TERM"; [ -n "$${PID:-}" ] && kill -TERM "$$PID" 2>/dev/null || true' TERM INT

        watcher &

        while true; do
          echo '[panel] starting...'
          set +e
          python -u run.py &
          PID=$!
          wait "$$PID"
          rc=$?
          set -e
          echo "[panel] exited with code $$rc"

          if [ "$$rc" -eq 0 ]; then
            sleep 1
            backoff=1
          else
            sleep "$$backoff"
            if [ "$$backoff" -lt 30 ]; then backoff=$(( backoff * 2 )); fi
          fi
        done
    ports:
      - "5000:5000"
    environment:
      HOST: 0.0.0.0
      PORT: 5000
      SP_BRIDGE_URL: ws://bridge:8765/ws
      SP_TOKEN: SUPER_SECRET
      DB_HOST: 79.174.89.178
      DB_PORT: 16844
      DB_USER: HBusiwshu9whsd
      DB_PASSWORD: "NIUhbsuhwSU*GB0w87ygs08"
      DB_NAME: panel
      AUTHME_NAME: authmedb
      LUCKPERMS_HOST: 79.174.89.178
      LUCKPERMS_PORT: 16844
      LUCKPERMS_USER: donateLP
      LUCKPERMS_PASSWORD: "M8YI2rA7t-pT5QAa1E-PxjF2f4yt"
      LUCKPERMS_NAME: donate
      PYTHONUNBUFFERED: "1"
    volumes:
      - app_code:/app
    depends_on:
      git:
        condition: service_healthy
      bridge:
        condition: service_healthy
    restart: unless-stopped
    <<: *common_limits
    mem_limit: 768m
    memswap_limit: 768m
    cpus: "1.00"
