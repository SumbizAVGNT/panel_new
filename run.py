# run.py
from __future__ import annotations

import os
import sys
import signal
from pathlib import Path

# --- .env (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
try:
    from dotenv import load_dotenv  # type: ignore
except Exception:  # –ø–∞–∫–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —ç—Ç–æ –æ–∫
    def load_dotenv(*_args, **_kwargs):  # type: ignore
        return False

load_dotenv()

# --- Flask app factory / CLI ---
from app import create_app  # noqa: E402
from app.cli import register_cli  # noqa: E402


def _bool_env(*keys: str, default: bool = False) -> bool:
    """True –µ—Å–ª–∏ –ª—é–±–∞—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö == '1' / 'true' / 'yes' / 'on' (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞)."""
    truthy = {"1", "true", "yes", "on"}
    for k in keys:
        v = os.environ.get(k)
        if v is not None and v.strip().lower() in truthy:
            return True
    return default


def main() -> int:
    app = create_app()
    register_cli(app)

    # ---- –∫–æ–Ω—Ñ–∏–≥ –∑–∞–ø—É—Å–∫–∞ ----
    debug = _bool_env("FLASK_DEBUG", "DEBUG", default=False)
    host = os.environ.get("HOST", "0.0.0.0")
    port = int(os.environ.get("PORT", "5000"))

    # –ü–æ—Ç–∏—à–µ Werkzeug –≤ –ø—Ä–æ–¥–µ
    if not debug:
        import logging
        logging.getLogger("werkzeug").setLevel(logging.INFO)

    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö –ø—Ä–∏ debug
    extra_files: list[str] = []
    if debug:
        # –ù–∞–π–¥—ë–º –∫–∞—Ç–∞–ª–æ–≥ templates —Ä—è–¥–æ–º —Å app/
        root = Path(__file__).resolve().parent
        # –û–±—ã—á–Ω–æ —à–∞–±–ª–æ–Ω—ã –≤ ./app/templates –∏–ª–∏ ./templates
        candidates = [root / "app" / "templates", root / "templates"]
        for p in candidates:
            if p.exists():
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ –ª—é–±–æ–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—é
                extra_files = [str(f) for f in p.rglob("*") if f.is_file()]
                break

    # –ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä
    def banner() -> None:
        url_local = f"http://127.0.0.1:{port}"
        try:
            # –Ω–∞ Docker/WSL —á–∞—Å—Ç–æ —É–¥–æ–±–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å 0.0.0.0
            url_all = f"http://{host}:{port}"
        except Exception:
            url_all = url_local
        print(
            "\n"
            "üöÄ MoonRein panel\n"
            f"   Debug: {debug}\n"
            f"   Running on: {url_local}  (and {url_all})\n"
        )

    banner()

    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ Ctrl+C –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö
    def _graceful_exit(_sig, _frame):
        print("\nShutting down‚Ä¶")
        sys.exit(0)

    signal.signal(signal.SIGINT, _graceful_exit)
    try:
        signal.signal(signal.SIGTERM, _graceful_exit)
    except Exception:
        pass

    app.run(
        host=host,
        port=port,
        debug=debug,
        use_reloader=debug,        # —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–ª–∞–¥–∫–µ
        extra_files=extra_files,   # —Å–ª–µ–¥–∏–º –∑–∞ —à–∞–±–ª–æ–Ω–∞–º–∏
        threaded=True,
    )
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
f