# app/cli.py
from __future__ import annotations

import os
import click
from flask import current_app
from pymysql.err import OperationalError
from werkzeug.security import generate_password_hash

from .database import get_db_connection, SCHEMA_SQL


def _apply_schema(conn) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ç—á CREATE/ALTER –∏–∑ SCHEMA_SQL.
    –û–±—ë—Ä—Ç–∫–∞ —É–º–µ–µ—Ç executescript(sql) –∏ —Å–∞–º–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ ';'.
    """
    conn.executescript(SCHEMA_SQL)


def _column_exists(conn, table: str, column: str) -> bool:
    cur = conn.execute(
        """
        SELECT 1
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
          AND TABLE_NAME = %s
          AND COLUMN_NAME = %s
        """,
        (table, column),
    )
    try:
        row = cur.fetchone()
        return row is not None
    finally:
        cur.close()


def _table_exists(conn, table: str) -> bool:
    cur = conn.execute(
        """
        SELECT 1
        FROM INFORMATION_SCHEMA.TABLES
        WHERE TABLE_SCHEMA = DATABASE()
          AND TABLE_NAME = %s
        """,
        (table,),
    )
    try:
        return cur.fetchone() is not None
    finally:
        cur.close()


def _commit_if_possible(conn) -> None:
    try:
        conn.commit()
    except Exception:
        # –ù–∞ —Å–ª—É—á–∞–π –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç–∞ ‚Äî —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        pass


def _ensure_posts_extras(conn) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è embed/attachments –≤ —Ç–∞–±–ª–∏—Ü—É posts.
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å JSON; –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî MEDIUMTEXT.
    """
    # embed_json
    if not _column_exists(conn, "posts", "embed_json"):
        try:
            conn.execute("ALTER TABLE posts ADD COLUMN embed_json JSON NULL")
        except OperationalError:
            conn.execute("ALTER TABLE posts ADD COLUMN embed_json MEDIUMTEXT NULL")

    # attachment_file
    if not _column_exists(conn, "posts", "attachment_file"):
        conn.execute("ALTER TABLE posts ADD COLUMN attachment_file VARCHAR(512) NULL")

    # attachment_name
    if not _column_exists(conn, "posts", "attachment_name"):
        conn.execute("ALTER TABLE posts ADD COLUMN attachment_name VARCHAR(255) NULL")

    # attachment_mime
    if not _column_exists(conn, "posts", "attachment_mime"):
        conn.execute("ALTER TABLE posts ADD COLUMN attachment_mime VARCHAR(100) NULL")

    # –ò–Ω–¥–µ–∫—Å—ã (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö)
    for ddl in (
        "ALTER TABLE posts ADD INDEX idx_posts_created (created_at)",
        "ALTER TABLE posts ADD INDEX idx_posts_status (status)",
    ):
        try:
            conn.execute(ddl)
        except OperationalError:
            pass

    _commit_if_possible(conn)


def _upsert_admin_user(conn, username: str, password: str, role: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é admin/superadmin.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü password_hash) –∏ —Ä–æ–ª—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (action_str, user_id|None).
    """
    if not _table_exists(conn, "users"):
        raise RuntimeError(
            "–¢–∞–±–ª–∏—Ü–∞ 'users' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: flask --app run.py migrate"
        )

    has_pwd_col = _column_exists(conn, "users", "password_hash")
    if not _column_exists(conn, "users", "role"):
        raise RuntimeError("–í —Ç–∞–±–ª–∏—Ü–µ 'users' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'role'.")

    # –ò—â–µ–º –ø–æ username
    cur = conn.execute("SELECT id, role FROM users WHERE username=%s LIMIT 1", (username,))
    row = cur.fetchone()
    cur.close()

    pwd_hash = generate_password_hash(password) if has_pwd_col else None

    if row:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        if has_pwd_col and pwd_hash:
            conn.execute(
                "UPDATE users SET password_hash=%s, role=%s WHERE id=%s",
                (pwd_hash, role, row["id"]),
            )
        else:
            conn.execute(
                "UPDATE users SET role=%s WHERE id=%s",
                (role, row["id"]),
            )
        _commit_if_possible(conn)
        return "–æ–±–Ω–æ–≤–ª—ë–Ω", row["id"]
    else:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
        if has_pwd_col:
            cur = conn.execute(
                "INSERT INTO users (username, password_hash, role) VALUES (%s, %s, %s)",
                (username, pwd_hash, role),
            )
        else:
            cur = conn.execute(
                "INSERT INTO users (username, role) VALUES (%s, %s)",
                (username, role),
            )
        user_id = getattr(cur, "lastrowid", None)
        _commit_if_possible(conn)
        try:
            cur.close()
        except Exception:
            pass
        return "—Å–æ–∑–¥–∞–Ω", user_id


def register_cli(app):
    @app.cli.command("migrate")
    def migrate():
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç SCHEMA_SQL –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—è embed/attachments –≤ posts.
        –ó–∞–ø—É—Å–∫:  flask --app run.py migrate
        """
        db_path = current_app.config.get("DB_PATH")
        with get_db_connection(db_path) as conn:
            click.echo("‚è≥ –ü—Ä–∏–º–µ–Ω—è—é SCHEMA_SQL ...")
            _apply_schema(conn)
            click.echo("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")

            click.echo("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è posts (embed/attachments) ...")
            _ensure_posts_extras(conn)
            click.echo("‚úÖ –ü–æ–ª—è posts –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

        click.echo("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    @app.cli.command("init-db")
    def init_db():
        """
        –°–∏–Ω–æ–Ω–∏–º migrate (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–∏–≤—ã—á–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è).
        """
        migrate.callback()  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É

    @app.cli.command("create-admin")
    @click.option("--username", "-u", prompt="–õ–æ–≥–∏–Ω", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username).")
    @click.option(
        "--password",
        "-p",
        prompt=True,
        hide_input=True,
        confirmation_prompt=True,
        help="–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞.",
    )
    @click.option(
        "--role",
        "-r",
        type=click.Choice(["admin", "superadmin"], case_sensitive=False),
        default="admin",
        show_default=True,
        help="–†–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
    )
    def create_admin(username: str, password: str, role: str):
        """
        –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é admin/superadmin –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ.
        –ü—Ä–∏–º–µ—Ä—ã:
          flask --app run.py create-admin -u admin
          flask --app run.py create-admin -u boss -r superadmin
        """
        db_path = current_app.config.get("DB_PATH")
        with get_db_connection(db_path) as conn:
            click.echo("‚è≥ –°–æ–∑–¥–∞—é/–æ–±–Ω–æ–≤–ª—è—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ...")
            try:
                action, user_id = _upsert_admin_user(conn, username.strip(), password, role.lower())
            except Exception as e:
                raise click.ClickException(str(e))

        tail = f" (id={user_id})" if user_id is not None else ""
        click.echo(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' {action} —Å —Ä–æ–ª—å—é '{role}'{tail}.")

    @app.cli.command("bootstrap")
    def bootstrap():
        """
        –ü–æ–ª–Ω—ã–π –ø–µ—Ä–≤–∏—á–Ω—ã–π –ø—Ä–æ–≥–æ–Ω:
          1) –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã
          2) —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –∏–∑ .env (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã ADMIN_USERNAME / ADMIN_PASSWORD)

        –ü—Ä–∏–º–µ—Ä:
          FLASK_APP=run.py flask bootstrap
        """
        # 1) migrate
        migrate.callback()

        # 2) admin from .env
        env_user = os.environ.get("ADMIN_USERNAME")
        env_pass = os.environ.get("ADMIN_PASSWORD")
        role = "superadmin"

        if env_user and env_pass:
            db_path = current_app.config.get("DB_PATH")
            with get_db_connection(db_path) as conn:
                click.echo("‚è≥ –°–æ–∑–¥–∞—é/–æ–±–Ω–æ–≤–ª—è—é —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ .env ...")
                try:
                    action, user_id = _upsert_admin_user(conn, env_user.strip(), env_pass, role)
                except Exception as e:
                    raise click.ClickException(str(e))
                tail = f" (id={user_id})" if user_id is not None else ""
                click.echo(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{env_user}' {action} —Å —Ä–æ–ª—å—é '{role}'{tail}.")
        else:
            click.echo("‚ÑπÔ∏è  ADMIN_USERNAME/ADMIN_PASSWORD –≤ .env –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî —à–∞–≥ —Å –∞–¥–º–∏–Ω–æ–º –ø—Ä–æ–ø—É—â–µ–Ω.")
