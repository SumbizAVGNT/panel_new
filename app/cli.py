# app/cli.py
import click
from flask import current_app
from pymysql.err import OperationalError

from .database import get_db_connection, SCHEMA_SQL


def _apply_schema(conn) -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞—Ç—á CREATE/ALTER –∏–∑ SCHEMA_SQL.
    –í–∞—à–∞ –æ–±—ë—Ä—Ç–∫–∞ —É–∂–µ —É–º–µ–µ—Ç executescript(sql) –∏ —Å–∞–º–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –ø–æ ';'.
    """
    conn.executescript(SCHEMA_SQL)


def _column_exists(conn, table: str, column: str) -> bool:
    cur = conn.execute(
        """
        SELECT 1
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = DATABASE()
          AND TABLE_NAME = %s
          AND COLUMN_NAME = %s
        """,
        (table, column),
    )
    row = cur.fetchone()
    return row is not None


def _ensure_posts_extras(conn) -> None:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è embed/attachments –≤ —Ç–∞–±–ª–∏—Ü—É posts.
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å JSON; –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è ‚Äî MEDIUMTEXT.
    –ö–æ–º–º–∏—Ç –Ω–µ –Ω—É–∂–µ–Ω: –≤–∞—à–∞ –æ–±—ë—Ä—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç DDL —Å—Ä–∞–∑—É.
    """
    # embed_json
    if not _column_exists(conn, "posts", "embed_json"):
        try:
            conn.execute("ALTER TABLE posts ADD COLUMN embed_json JSON NULL")
        except OperationalError:
            conn.execute("ALTER TABLE posts ADD COLUMN embed_json MEDIUMTEXT NULL")

    # attachment_file
    if not _column_exists(conn, "posts", "attachment_file"):
        conn.execute("ALTER TABLE posts ADD COLUMN attachment_file VARCHAR(512) NULL")

    # attachment_name
    if not _column_exists(conn, "posts", "attachment_name"):
        conn.execute("ALTER TABLE posts ADD COLUMN attachment_name VARCHAR(255) NULL")

    # attachment_mime
    if not _column_exists(conn, "posts", "attachment_mime"):
        conn.execute("ALTER TABLE posts ADD COLUMN attachment_mime VARCHAR(100) NULL")

    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ duplicate:
    # try: conn.execute("ALTER TABLE posts ADD INDEX idx_posts_created (created_at)")
    # except OperationalError: pass
    # try: conn.execute("ALTER TABLE posts ADD INDEX idx_posts_status (status)")
    # except OperationalError: pass


def register_cli(app):
    @app.cli.command("migrate")
    def migrate():
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç SCHEMA_SQL –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—è embed/attachments –≤ posts.
        –ó–∞–ø—É—Å–∫:  flask --app run.py migrate
        """
        db_path = current_app.config.get("DB_PATH")
        conn = get_db_connection(db_path)

        click.echo("‚è≥ –ü—Ä–∏–º–µ–Ω—è—é SCHEMA_SQL ...")
        _apply_schema(conn)
        click.echo("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.")

        click.echo("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è posts (embed/attachments) ...")
        _ensure_posts_extras(conn)
        click.echo("‚úÖ –ü–æ–ª—è posts –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

        click.echo("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
